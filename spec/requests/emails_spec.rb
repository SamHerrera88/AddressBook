 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/emails", type: :request do
  let(:person) { FactoryBot.create(:person) }
  # Email. As you add validations to Email, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      email_address: "email@example.com",
      person_id: person.id,
    }
  }

  let(:invalid_attributes) {
    {
      email_address: nil,
      person_id: nil,
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      skip("Now nested under people#show")
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      email = Email.create! valid_attributes
      get person_email_url(person, email)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_person_email_url(person)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      email = Email.create! valid_attributes
      get edit_person_email_url(person, email)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Email" do
        expect {
          post person_emails_url(person), params: { email: valid_attributes }
        }.to change(Email, :count).by(1)
      end

      it "redirects to the created email" do
        post person_emails_url(person), params: { email: valid_attributes }
        expect(response).to redirect_to(person_url(person))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Email" do
        expect {
          post person_emails_url(person), params: { email: invalid_attributes }
        }.to change(Email, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post person_emails_url(person), params: { email: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          email_address: "changed@example.com",
        }
      }

      it "updates the requested email" do
        email = Email.create! valid_attributes
        patch person_email_url(person, email), params: { email: new_attributes }
        email.reload
        expect(email.email_address).to eq("changed@example.com")
      end

      it "redirects to the email" do
        email = Email.create! valid_attributes
        patch person_email_url(person, email), params: { email: new_attributes }
        email.reload
        expect(response).to redirect_to(person_url(person))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        email = Email.create! valid_attributes
        patch person_email_url(person, email), params: { email: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested email" do
      email = Email.create! valid_attributes
      expect {
        delete person_email_url(person, email)
      }.to change(Email, :count).by(-1)
    end

    it "redirects to the emails list" do
      email = Email.create! valid_attributes
      delete person_email_url(person, email)
      expect(response).to redirect_to(person_url(person))
    end
  end
end
